#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class C_parser < Racc::Parser

module_eval(<<'...end C_parser.y.rb/module_eval...', 'C_parser.y.rb', 767)

  RESERVED = {
    # keyword
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'union' => :UNION,
    'sizeof' => :SIZEOF,
    'throw' => :THROW,

    # specifier
    # types
    'void'    => :VOID,
    'char'    => :CHAR,
    'short'   => :SHORT,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,
    'extern'   => :EXTERN,

    'long'    => :LONG,
    'float'   => :FLOAT,
    'double'  => :DOUBLE,
    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int'     => :INT,
    'enum'    => :ENUM,

    'if'      => :IF,
    'else'    => :ELSE,
    'while'   => :WHILE,
    'do'      => :DO,
    'for'     => :FOR,
    'case'    => :CASE,
    'default' => :DEFAULT,
    'goto'    => :GOTO,
    'continue' => :CONTINUE,
    'break'   => :BREAK,
    'return'  => :RETURN,
    '__inline__'  => :__INLINE__,
    'inline'  => :INLINE,
    '__inline'  => :__INLINE,
    'Inline'  => :CINLINE,        # inline starting with Capital letter
    'static'  => :STATIC,
    'register' => :REGISTER,
    'auto'    => :AUTO,
    '__extension__'    => :EXTENSION,
    '__asm__' => :_ASM

  }

  @@generator_nest = -1
  @@generator_stack = []
  @@current_locale = []

  def finalize

    # mikan Namespace.pop
    Celltype.pop
    Cell.pop
    CompositeCelltype.pop
    Region.pop

  end

  def set_plugin( plugin )
    @plugin = plugin
  end

  def self.get_plugin
    @@generator_stack[@@generator_nest].get_plugin
  end

  def get_plugin
    @plugin
  end

  def parse(files)

    # mikan Namespace.push
    Celltype.push
    Cell.push
    CompositeCelltype.push
    Region.push

    @@generator_nest += 1
    @@generator_stack[@@generator_nest] = self
    @b_no_type_name = false

   begin

    @q = []
    comment = false
#    b_asm   = false

    # euc のコメントを utf8 として扱うと、コメントの終わりを誤る問題の対策
    TECS_LANG::set_kcode_binary

    # 800U, 0xffLL など (整数リテラルに共通の修飾子)
    integer_qualifier = "([Uu][Ll][Ll]|[Uu][Ll]|[Uu]|[Ll][Ll]|[Ll])?"

    files.each {|file|
      lineno = 1
     begin
#2.0       IO.foreach(file) {|line|
       TECSIO.foreach(file) {|line|
        col = 1
        line.rstrip!

        until line.empty?

          if comment
            case line
            # コメント終了
            when /\A\*\//
              comment = false
            when /\A./
              ;
            end
          else
            case line
            # 空白、プリプロセスディレクティブ
            when /\A\s+/
              ;
            # 識別子
            when /\A[a-zA-Z_]\w*/
              word = $&
              @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]
            # 16 進数定数
            when /\A0x[0-9A-Fa-f]+#{integer_qualifier}/
              @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
            # 8 進数定数
            when /\A0[0-7]+#{integer_qualifier}/
              @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
            # 浮動小数定数
            when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?/
              @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
            # 整数定数
            when /\A\d+#{integer_qualifier}/
            # when /\A\d+/
              @q << [:INTEGER_CONSTANT, Token.new($&.to_i, file, lineno, col)]
            # 文字
            when /\A'(?:[^'\\]|\\.)'/
              @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
            # 文字列
#              "#include  #include #include \"../systask/logtask.cfg\"       最後の " 忘れ)で無限ループ
#            when /\A"(?:[^"\\]+|\\.)*"/
            when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
              @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
            # 行コメント
            when /\A\/\/.*$/
              # 読み飛ばすだけ
            # コメント開始
            when /\A\/\*/
              comment = true
            when /\A>>=/, /\A<<=/, /\A>>/,  /\A<</
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\+=/, /\A\-=/, /\A\*=/, /\A\/=/, /\A%=/, /\A&=/, /\A\|=/, /\A\^=/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A::/, /\A==/, /\A!=/, /\A>=/, /\A<=/, /\A\->/, /\A\+\+/, /\A\-\-/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\|\|/, /\A\&\&/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A./
              @q << [$&, Token.new($&, file, lineno, col)]
            else
              raise
            end
          end

          line = $'
          col += $&.length
        end

        lineno += 1
      }

     rescue => evar
       Generator.error( "B1002 while open or reading \'$1\'" , file )
       print_exception( evar )
     end
    }

    # 終了の印
    @q << nil

    @yydebug = true
    do_parse

   ensure
    @@generator_nest -= 1
    TECS_LANG::reset_kcode
   end

  end


  def next_token
    token = @q.shift

    if token then
      @@current_locale[@@generator_nest] = token[1].locale

      case token[1].val
      when ";", ":", ",", "(", ")", "{", "}"
        set_no_type_name false
      when ".", "->"
        set_no_type_name true
      end

      # TYPE_NAME トークンへ置き換え
      if @b_no_type_name == false
        if token[0] == :IDENTIFIER && Namespace.is_typename?( token[1].val ) then
          token[0] = :TYPE_NAME
          locale = @@current_locale[@@generator_nest]
#print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}: type_name'\n" )
        end
      end

      if $debug then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
        locale = @@current_locale[@@generator_nest]
        if token then
          print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}'\n" )
        else
          print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
        end
      end
    end

    token
  end

  def on_error(t, v, vstack)
    if v == "$" then
     Generator.error( "B1003 Unexpected EOF"  )
    else
     Generator.error( "B1004 syntax error near \'$1\'" , v.val )
    end

  end

  def self.current_locale
    @@current_locale[ @@generator_nest ]
  end

  def self.get_nest
    @@generator_nest
  end

  def set_no_type_name b_no_type_name
    locale = @@current_locale[ @@generator_nest ]
#print "b_no_type_name=#{b_no_type_name} #{locale[0]}: line #{locale[1]}\n"
    @b_no_type_name = b_no_type_name
  end

...end C_parser.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'109,110,111,112,113,115,396,116,357,294,81,249,294,121,122,81,226,366',
'120,123,124,125,126,127,128,364,55,109,110,111,112,113,115,294,116,370',
'79,99,146,228,121,122,359,356,331,120,123,124,125,126,127,128,253,9',
'10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37',
'32,33,69,250,251,254,68,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,293,116,78,283,380,249,233,121,122,81,234,294,120',
'123,124,125,126,127,128,147,365,109,110,111,112,113,115,85,116,264,84',
'366,146,265,121,122,144,77,282,120,123,124,125,126,127,128,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,266',
'99,274,250,251,254,284,255,256,257,258,259,260,261,262,147,263,109,110',
'111,112,113,115,423,116,180,294,145,249,275,121,122,81,419,294,120,123',
'124,125,126,127,128,147,421,109,110,111,112,113,115,292,116,295,152',
'294,146,298,121,122,272,179,384,120,123,124,125,126,127,128,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,383',
'99,303,250,251,254,360,255,256,257,258,259,260,261,262,147,263,109,110',
'111,112,113,115,420,116,304,85,305,249,84,121,122,81,385,294,120,123',
'124,125,126,127,128,147,401,109,110,111,112,113,115,400,116,386,352',
'294,146,351,121,122,174,175,294,120,123,124,125,126,127,128,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,217',
'218,387,250,251,254,392,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,399,116,362,352,362,249,351,121,122,81,3,294,120',
'123,124,125,126,127,128,147,62,109,110,111,112,113,195,402,116,215,216',
'212,146,405,121,122,213,214,330,120,123,124,125,126,127,128,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,229',
'230,332,250,251,254,406,255,256,257,258,259,260,261,262,147,263,109',
'110,111,112,113,115,334,116,328,329,335,249,336,121,122,81,215,216,120',
'123,124,125,126,127,128,147,337,109,110,111,112,113,197,339,116,215',
'216,212,146,340,121,122,213,214,341,120,123,124,125,126,127,128,253',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36',
'37,289,290,342,250,251,254,407,255,256,257,258,259,260,261,262,147,263',
'109,110,111,112,113,115,81,116,217,218,368,249,369,121,122,81,223,224',
'120,123,124,125,126,127,128,147,225,109,110,111,112,113,197,226,116',
'223,224,212,146,227,121,122,213,214,228,120,123,124,125,126,127,128',
'253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35',
'36,37,287,288,89,250,251,254,90,255,256,257,258,259,260,261,262,147',
'263,109,110,111,112,113,115,91,116,217,218,99,249,100,121,122,81,408',
'409,120,123,124,125,126,127,128,147,101,109,110,111,112,113,115,373',
'116,217,218,66,146,158,121,122,144,217,218,120,123,124,125,126,127,128',
'253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35',
'36,37,55,167,168,250,251,254,176,255,256,257,258,259,260,261,262,147',
'263,109,110,111,112,113,115,99,116,99,79,145,249,181,121,122,81,182',
'375,120,123,124,125,126,127,128,147,63,109,110,111,112,113,115,426,116',
'47,225,227,146,,121,122,,,,120,123,124,125,126,127,128,253,9,10,11,12',
'13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,,,,250,251',
'254,,255,256,257,258,259,260,261,262,147,263,109,110,111,112,113,115',
',116,,,,249,,121,122,81,,,120,123,124,125,126,127,128,147,,109,110,111',
'112,113,115,,116,,,,146,,121,122,,,,120,123,124,125,126,127,128,253',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36',
'37,,,,250,251,254,,255,256,257,258,259,260,261,262,147,263,109,110,111',
'112,113,115,,116,,,,249,,121,122,81,,,120,123,124,125,126,127,128,147',
',109,110,111,112,113,115,300,116,,,,146,,121,122,,,,120,123,124,125',
'126,127,128,253,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31',
'32,33,34,35,36,37,,,,250,251,254,,255,256,257,258,259,260,261,262,147',
'263,109,110,111,112,113,115,,116,,,,249,,121,122,81,252,,120,123,124',
'125,126,127,128,147,,109,110,111,112,113,115,,116,,,,146,,121,122,,',
',120,123,124,125,126,127,128,253,9,10,11,12,13,14,15,16,17,18,19,20',
'21,22,26,28,30,31,32,33,34,35,36,37,,,71,250,251,254,70,255,256,257',
'258,259,260,261,262,147,263,109,110,111,112,113,115,,116,,,,146,,121',
'122,,,,120,123,124,125,126,127,128,147,109,110,111,112,113,115,,116',
',,54,146,,121,122,72,53,,120,123,124,125,126,127,128,55,219,220,221',
'222,,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,,,109,110,111,112',
'113,115,,116,,,54,146,,121,122,,53,147,120,123,124,125,126,127,128,55',
'109,110,111,112,113,115,,116,,,54,146,298,121,122,272,53,147,120,123',
'124,125,126,127,128,55,,55,,,,13,14,15,16,17,18,19,20,21,22,26,28,30',
'31,32,33,,,109,110,111,112,113,115,,116,,,54,146,,121,122,,53,147,120',
'123,124,125,126,127,128,55,109,110,111,112,113,115,,116,,,54,146,,121',
'122,,53,147,120,123,124,125,126,127,128,55,219,220,221,222,,13,14,15',
'16,17,18,19,20,21,22,26,28,30,31,32,33,,,109,110,111,112,113,115,54',
'116,,,54,146,53,121,122,,53,147,120,123,124,125,126,127,128,55,109,110',
'111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128',
'109,110,111,112,113,115,,116,,,,146,,121,122,,,83,120,123,124,125,126',
'127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,147,,120,123,124',
'125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120',
'123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122',
',,147,120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146',
',121,122,,,147,120,123,124,125,126,127,128,109,110,111,112,113,115,',
'116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110,111,112',
'113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110',
'111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128',
'109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126',
'127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123,124',
'125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120',
'123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122',
',,147,120,123,124,125,126,127,128,109,110,111,112,113,115,,116,,,,146',
',121,122,,,147,120,123,124,125,126,127,128,109,110,111,112,113,115,',
'116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110,111,112',
'113,115,,116,,,,146,,121,122,,,147,120,123,124,125,126,127,128,109,110',
'111,112,113,115,,116,,268,,146,272,121,122,53,,147,120,123,124,125,126',
'127,128,109,110,111,112,113,115,,116,,353,54,146,,121,122,,53,147,120',
'123,124,125,126,127,128,55,,344,,,109,110,111,112,113,115,,116,,,,146',
'147,121,122,,83,,120,123,124,125,126,127,128,109,110,111,112,113,115',
',116,,,,146,147,121,122,362,,,120,123,124,125,126,127,128,109,110,111',
'112,113,115,,116,,,,146,147,121,122,,,,120,123,124,125,126,127,128,109',
'110,111,112,113,115,,116,,,,146,,121,122,144,371,147,120,123,124,125',
'126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,147,120,123',
'124,125,126,127,128,109,110,111,112,113,115,,116,,,54,146,,121,122,',
'53,147,120,123,124,125,126,127,128,55,,145,,,109,110,111,112,113,115',
',116,,,54,146,147,121,122,,53,,120,123,124,125,126,127,128,55,,188,',
',187,,190,,191,192,193,147,268,,,272,,,53,109,110,111,112,113,115,,116',
'55,,,146,,121,122,,,147,120,123,124,125,126,127,128,13,14,15,16,17,18',
'19,20,21,22,26,28,30,31,32,33,219,220,221,222,,,147,32,33,,,253,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,109',
'110,111,112,113,115,,116,,388,,146,,121,122,147,,,120,123,124,125,126',
'127,128,109,110,111,112,113,115,,116,,,,146,,121,122,144,,,120,123,124',
'125,126,127,128,109,110,111,112,113,115,,116,,,,146,,121,122,,,,120',
'123,124,125,126,127,128,109,110,111,112,113,115,,116,,,54,146,,121,122',
',53,147,120,123,124,125,126,127,128,55,,145,,,,,,,,,109,110,111,112',
'113,115,147,116,,,,146,,121,122,,253,,120,123,124,125,126,127,128,109',
'110,111,112,113,115,147,116,,,,146,,121,122,,,,120,123,124,125,126,127',
'128,,,253,,,,147,109,110,111,112,113,115,415,116,,,,146,,121,122,,,',
'120,123,124,125,126,127,128,109,110,111,112,113,115,417,116,,,147,146',
',121,122,,,,120,123,124,125,126,127,128,109,110,111,112,113,115,276',
'116,,,147,146,,121,122,144,418,,120,123,124,125,126,127,128,201,202',
'203,204,205,206,207,208,209,210,211,,,,,45,,147,9,10,11,12,13,14,15',
'16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,147,45,,,,,,,,,145',
',,,,,,,,,,,,,,147,44,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,28',
'30,31,32,33,34,35,36,37,,40,46,44,9,10,11,12,13,14,15,16,17,18,19,20',
'21,22,26,28,30,31,32,33,34,35,36,37,298,349,46,272,,,,,,,,,,,,55,,,',
',,,,,268,349,,272,,,53,,,,,,,,,55,,,,,,,,,9,10,11,12,13,14,15,16,17',
'18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16',
'17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,390,13,14,15,16,17,18',
'19,20,21,22,26,28,30,31,32,33,,,,,,,,154,13,14,15,16,17,18,19,20,21',
'22,26,28,30,31,32,33,,,,,,,9,10,11,12,13,14,15,16,17,18,19,20,21,22',
'26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16,17,18,19,20,21',
'22,26,28,30,31,32,33,34,35,36,37,345,9,10,11,12,13,14,15,16,17,18,19',
'20,21,22,26,28,30,31,32,33,34,35,36,37,,,,,,355,,,,,,,,,,,,,9,10,11',
'12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,281',
',,,,,,,,,,,,,,,,,,,,,,,169,,,,,,,,,,,,,9,10,11,12,13,14,15,16,17,18',
'19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16,17',
'18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15,16',
'17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14,15',
'16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13,14',
'15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12,13',
'14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11,12',
'13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10,11',
'12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,26,28,30,31,32,33,34,35,36,37' ]
        racc_action_table = arr = ::Array.new(3010, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'257,257,257,257,257,257,367,257,278,235,50,257,327,257,257,257,137,367',
'257,257,257,257,257,257,257,299,55,370,370,370,370,370,370,299,370,327',
'50,288,370,139,370,370,288,278,235,370,370,370,370,370,370,370,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,55,55,29,257,257,257,29,257,257,257,257,257',
'257,257,257,257,257,423,423,423,423,423,423,183,423,48,171,338,423,145',
'423,423,423,147,183,423,423,423,423,423,423,423,370,301,79,79,79,79',
'79,79,52,79,151,52,301,79,153,79,79,79,48,171,79,79,79,79,79,79,79,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,423,423,155,175,161,423,423,423,175,423,423,423',
'423,423,423,423,423,423,423,421,421,421,421,421,421,416,421,104,343',
'79,421,162,421,421,421,410,416,421,421,421,421,421,421,421,79,414,84',
'84,84,84,84,84,181,84,184,84,414,84,297,84,84,297,104,343,84,84,84,84',
'84,84,84,421,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,340,290,189,421,421,421,290',
'421,421,421,421,421,421,421,421,421,421,419,419,419,419,419,419,413',
'419,190,82,191,419,82,419,419,419,345,413,419,419,419,419,419,419,419',
'84,379,119,119,119,119,119,119,378,119,348,347,379,119,347,119,119,97',
'97,378,119,119,119,119,119,119,119,419,419,419,419,419,419,419,419,419',
'419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,316',
'316,350,419,419,419,354,419,419,419,419,419,419,419,419,419,419,417',
'417,417,417,417,417,377,417,368,271,369,417,271,417,417,417,1,377,417',
'417,417,417,417,417,417,119,23,120,120,120,120,120,120,380,120,315,315',
'312,120,385,120,120,312,312,233,120,120,120,120,120,120,120,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,140,140,249,417,417,417,389,417,417,417,417',
'417,417,417,417,417,417,415,415,415,415,415,415,251,415,231,231,254',
'415,255,415,415,415,314,314,415,415,415,415,415,415,415,120,256,121',
'121,121,121,121,121,258,121,132,132,313,121,259,121,121,313,313,260',
'121,121,121,121,121,121,121,415,415,415,415,415,415,415,415,415,415',
'415,415,415,415,415,415,415,415,415,415,415,415,415,415,415,178,178',
'261,415,415,415,391,415,415,415,415,415,415,415,415,415,415,401,401',
'401,401,401,401,400,401,133,133,306,401,307,401,401,401,135,135,401',
'401,401,401,401,401,401,121,323,122,122,122,122,122,122,324,122,322',
'322,131,122,325,122,122,131,131,326,122,122,122,122,122,122,122,401',
'401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401',
'401,401,401,401,401,401,401,177,177,64,401,401,401,65,401,401,401,401',
'401,401,401,401,401,401,399,399,399,399,399,399,67,399,319,319,70,399',
'71,399,399,399,394,394,399,399,399,399,399,399,399,122,72,144,144,144',
'144,144,144,330,144,318,318,27,144,86,144,144,144,317,317,144,144,144',
'144,144,144,144,399,399,399,399,399,399,399,399,399,399,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,399,87,92,93,399,399,399',
'99,399,399,399,399,399,399,399,399,399,399,375,375,375,375,375,375,100',
'375,101,107,144,375,108,375,375,375,114,333,375,375,375,375,375,375',
'375,144,25,176,176,176,176,176,176,420,176,3,136,138,176,,176,176,,',
',176,176,176,176,176,176,176,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,,,,375,375',
'375,,375,375,375,375,375,375,375,375,375,375,334,334,334,334,334,334',
',334,,,,334,,334,334,334,,,334,334,334,334,334,334,334,176,,187,187',
'187,187,187,187,,187,,,,187,,187,187,,,,187,187,187,187,187,187,187',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334,334,334,334,334,334,,,,334,334,334,,334,334,334,334,334',
'334,334,334,334,334,332,332,332,332,332,332,,332,,,,332,,332,332,332',
',,332,332,332,332,332,332,332,187,,188,188,188,188,188,188,188,188,',
',,188,,188,188,,,,188,188,188,188,188,188,188,332,332,332,332,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,,,,332,332,332,,332,332,332,332,332,332,332,332,332,332,148',
'148,148,148,148,148,,148,,,,148,,148,148,148,148,,148,148,148,148,148',
'148,148,188,,200,200,200,200,200,200,,200,,,,200,,200,200,,,,200,200',
'200,200,200,200,200,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,,,31,148,148,148',
'31,148,148,148,148,148,148,148,148,148,148,115,115,115,115,115,115,',
'115,,,,115,,115,115,,,,115,115,115,115,115,115,115,200,212,212,212,212',
'212,212,,212,,,283,212,,212,212,31,283,,212,212,212,212,212,212,212',
'283,320,320,320,320,,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,,,195,195,195,195,195,195,,195,,,180,195,,195,195,,180',
'115,195,195,195,195,195,195,195,180,213,213,213,213,213,213,,213,,,4',
'213,186,213,213,186,4,212,213,213,213,213,213,213,213,4,,186,,,,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,,,197,197',
'197,197,197,197,,197,,,54,197,,197,197,,54,195,197,197,197,197,197,197',
'197,54,214,214,214,214,214,214,,214,,,76,214,,214,214,,76,213,214,214',
'214,214,214,214,214,76,134,134,134,134,,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,,,215,215,215,215,215,215,51,215',
',,78,215,51,215,215,,78,197,215,215,215,215,215,215,215,78,216,216,216',
'216,216,216,,216,,,,216,,216,216,,,214,216,216,216,216,216,216,216,217',
'217,217,217,217,217,,217,,,,217,,217,217,,,51,217,217,217,217,217,217',
'217,218,218,218,218,218,218,,218,,,,218,,218,218,,215,,218,218,218,218',
'218,218,218,219,219,219,219,219,219,,219,,,,219,,219,219,,,216,219,219',
'219,219,219,219,219,220,220,220,220,220,220,,220,,,,220,,220,220,,,217',
'220,220,220,220,220,220,220,221,221,221,221,221,221,,221,,,,221,,221',
'221,,,218,221,221,221,221,221,221,221,222,222,222,222,222,222,,222,',
',,222,,222,222,,,219,222,222,222,222,222,222,222,223,223,223,223,223',
'223,,223,,,,223,,223,223,,,220,223,223,223,223,223,223,223,224,224,224',
'224,224,224,,224,,,,224,,224,224,,,221,224,224,224,224,224,224,224,225',
'225,225,225,225,225,,225,,,,225,,225,225,,,222,225,225,225,225,225,225',
'225,226,226,226,226,226,226,,226,,,,226,,226,226,,,223,226,226,226,226',
'226,226,226,227,227,227,227,227,227,,227,,,,227,,227,227,,,224,227,227',
'227,227,227,227,227,228,228,228,228,228,228,,228,,,,228,,228,228,,,225',
'228,228,228,228,228,228,228,229,229,229,229,229,229,,229,,,,229,,229',
'229,,,226,229,229,229,229,229,229,229,230,230,230,230,230,230,,230,',
',,230,,230,230,,,227,230,230,230,230,230,230,230,250,250,250,250,250',
'250,,250,,,,250,,250,250,,,228,250,250,250,250,250,250,250,262,262,262',
'262,262,262,,262,,267,,262,267,262,262,267,,229,262,262,262,262,262',
'262,262,272,272,272,272,272,272,,272,,272,236,272,,272,272,,236,230',
'272,272,272,272,272,272,272,236,,262,,,294,294,294,294,294,294,,294',
',,,294,250,294,294,,267,,294,294,294,294,294,294,294,295,295,295,295',
'295,295,,295,,,,295,262,295,295,295,,,295,295,295,295,295,295,295,303',
'303,303,303,303,303,,303,,,,303,272,303,303,,,,303,303,303,303,303,303',
'303,329,329,329,329,329,329,,329,,,,329,,329,329,329,329,294,329,329',
'329,329,329,329,329,335,335,335,335,335,335,,335,,,,335,,335,335,,,295',
'335,335,335,335,335,335,335,336,336,336,336,336,336,,336,,,96,336,,336',
'336,,96,303,336,336,336,336,336,336,336,96,,329,,,337,337,337,337,337',
'337,,337,,,165,337,329,337,337,,165,,337,337,337,337,337,337,337,165',
',118,,,118,,118,,118,118,118,335,157,,,157,,,157,339,339,339,339,339',
'339,,339,157,,,339,,339,339,,,336,339,339,339,339,339,339,339,46,46',
'46,46,46,46,46,46,46,46,46,46,46,46,46,46,321,321,321,321,,,337,118',
'118,,,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,351,351,351,351,351,351,,351,,351',
',351,,351,351,339,,,351,351,351,351,351,351,351,362,362,362,362,362',
'362,,362,,,,362,,362,362,362,,,362,362,362,362,362,362,362,366,366,366',
'366,366,366,,366,,,,366,,366,366,,,,366,366,366,366,366,366,366,381',
'381,381,381,381,381,,381,,,357,381,,381,381,,357,351,381,381,381,381',
'381,381,381,357,,362,,,,,,,,,382,382,382,382,382,382,362,382,,,,382',
',382,382,,381,,382,382,382,382,382,382,382,402,402,402,402,402,402,366',
'402,,,,402,,402,402,,,,402,402,402,402,402,402,402,,,382,,,,381,403',
'403,403,403,403,403,403,403,,,,403,,403,403,,,,403,403,403,403,403,403',
'403,404,404,404,404,404,404,404,404,,,382,404,,404,404,,,,404,404,404',
'404,404,404,404,409,409,409,409,409,409,163,409,,,402,409,,409,409,409',
'409,,409,409,409,409,409,409,409,129,129,129,129,129,129,129,129,129',
'129,129,,,,,2,,403,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,163,163,163,163,404,40,,,,,,,,,409,,,,,',
',,,,,,,,,409,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,298,298,40,298,,,,,,,,,,,,298,,,,,,,,,268,268,,268,,,268,,,,,',
',,,268,,,,,,,,,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'352,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,,,,,85,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,,,,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352,352',
'352,352,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,85,266,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,',
',273,,,,,,,,,,,,,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,273,273,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,166,,,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,,,,,,,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94',
'94,94,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,90,90,90,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5' ]
        racc_action_check = arr = ::Array.new(3010, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   392,  2368,   787,  1232,  2931,  2811,  2883,  2612,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   348,   nil,   724,   nil,   682,   nil,    66,
   nil,  1100,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2396,   nil,   nil,   nil,   nil,   nil,  2000,   nil,    83,   nil,
    -7,  1352,   120,   nil,  1281,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   626,   630,   nil,   647,  2907,   nil,
   655,   653,   667,   nil,  2513,  2537,  1307,   nil,  1356,   119,
   nil,   nil,   284,   nil,   213,  2587,   689,   713,   nil,   nil,
  2859,  2835,   682,   683,  2763,   nil,  1962,   306,   nil,   698,
   745,   747,   nil,   nil,   177,   nil,   nil,   718,   670,   nil,
   nil,   nil,   nil,   nil,   759,  1126,   nil,   nil,  2009,   307,
   401,   495,   589,   nil,   nil,   nil,   nil,   nil,   nil,  2311,
   nil,   579,   482,   543,  1299,   545,   767,   -21,   751,     0,
   413,   nil,   nil,   nil,   683,    99,   nil,    97,  1032,   nil,
   nil,   118,   nil,   125,   nil,   152,   nil,  2020,   nil,   nil,
  2787,   119,   146,  2317,   nil,  1992,  2739,   nil,   nil,   nil,
   nil,    84,   nil,   nil,   nil,   159,   777,   623,   529,   nil,
  1206,   208,   nil,    92,   215,   nil,  1234,   871,   965,   260,
   277,   279,   nil,   nil,   nil,  1201,   nil,  1276,   nil,   nil,
  1059,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1152,  1227,  1302,  1351,  1377,  1402,  1427,  1452,
  1477,  1502,  1527,  1552,  1577,  1602,  1627,  1652,  1677,  1702,
  1727,   460,   nil,   411,   nil,   -10,  1807,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   413,
  1752,   434,   nil,   nil,   473,   475,   489,    -2,   496,   496,
   460,   495,  1777,   nil,   nil,   nil,  2654,  1781,  2492,   nil,
   nil,   378,  1802,  2678,   nil,   nil,   nil,   nil,   -11,   nil,
   nil,   nil,   nil,  1157,   nil,   nil,   nil,   nil,    24,   nil,
   253,   nil,   nil,   nil,  1832,  1857,   nil,   220,  2468,    14,
   nil,   112,   nil,  1882,   nil,   nil,   566,   568,   nil,   nil,
   nil,   nil,   391,   485,   463,   388,   330,   672,   664,   637,
  1149,  2044,   564,   569,   560,   565,   569,    -7,   nil,  1907,
   683,   nil,   938,   727,   844,  1932,  1957,  1987,    17,  2032,
   211,   nil,   nil,   178,   nil,   286,   nil,   311,   309,   nil,
   353,  2109,  2563,   nil,   354,   nil,   nil,  2189,   nil,   nil,
   nil,   nil,  2134,   nil,   nil,   nil,  2159,    -2,   367,   369,
    25,   nil,   nil,   nil,   nil,   750,   nil,   374,   307,   300,
   402,  2184,  2220,   nil,   nil,   403,   nil,   nil,   nil,   448,
   nil,   545,   nil,   nil,   656,   nil,   nil,   nil,   nil,   656,
   553,   562,  2245,  2277,  2302,   nil,   nil,   nil,   nil,  2327,
   119,   nil,   nil,   280,   206,   468,   186,   374,   nil,   280,
   731,   186,   nil,    92,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -206,  -258,    -1,  -258,  -258,   -86,   -87,   -88,   -92,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -118,  -121,  -258,
  -138,  -258,  -160,  -161,  -162,  -163,  -164,  -165,  -207,  -208,
  -258,  -210,  -211,  -214,  -215,  -216,  -258,   429,  -258,   -94,
   -96,  -258,  -167,  -169,  -258,  -175,   -89,  -112,  -114,   -90,
   -91,   -93,  -213,  -212,  -120,  -258,  -124,  -137,  -258,  -141,
  -258,  -152,  -155,  -209,  -128,  -130,  -258,   -85,  -258,  -258,
  -220,  -221,  -166,  -168,  -258,  -258,  -258,  -176,  -177,  -116,
  -258,  -258,  -112,  -113,  -258,  -139,  -258,  -258,  -156,  -158,
  -258,  -258,  -129,  -131,  -258,  -218,   -95,   -96,    -2,    -3,
    -4,    -5,    -6,    -7,    -8,  -258,   -10,   -12,   -25,  -258,
  -258,  -258,  -258,   -31,   -32,   -33,   -34,   -35,   -36,   -37,
   -39,   -43,   -46,   -49,   -54,   -57,   -59,   -61,   -63,   -65,
   -67,   -69,   -97,  -200,  -258,  -258,  -254,  -258,  -258,   -37,
   -84,  -258,  -172,  -258,  -174,  -179,  -181,  -185,  -170,  -178,
  -258,  -112,  -113,  -258,  -122,  -258,  -258,  -144,  -143,  -136,
  -140,  -258,  -145,  -147,  -148,  -258,  -258,  -258,  -258,  -217,
  -258,  -258,   -11,  -258,  -258,   -82,  -186,  -258,  -258,  -258,
  -258,  -258,   -19,   -20,   -26,  -258,   -27,  -258,   -29,   -30,
  -258,   -71,   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,
   -80,   -81,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,
  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,
  -258,  -258,  -204,  -258,  -255,  -258,  -258,  -222,  -223,  -224,
  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -233,  -254,
  -258,  -258,  -237,  -238,  -258,  -258,  -258,  -258,  -258,  -258,
  -258,  -258,  -258,  -257,  -171,  -173,  -258,  -188,  -258,  -183,
  -184,  -189,  -258,  -258,  -127,  -126,  -119,  -123,  -258,  -132,
  -134,  -135,  -142,  -258,  -150,  -157,  -159,  -149,  -258,  -153,
  -258,  -219,  -256,    -9,  -258,  -258,  -187,  -188,  -258,  -258,
   -14,  -258,   -23,  -258,   -17,   -18,  -258,  -258,   -70,   -40,
   -41,   -42,   -44,   -45,   -47,   -48,   -50,   -51,   -52,   -53,
   -55,   -56,   -58,   -60,   -62,   -64,   -66,  -258,  -201,  -258,
  -258,  -239,  -258,  -258,  -258,  -258,  -258,  -258,  -258,  -258,
  -258,  -250,  -251,  -258,  -252,  -258,  -182,  -190,  -258,  -196,
  -258,  -258,  -258,  -192,  -258,  -117,  -125,  -258,  -146,  -151,
  -154,   -83,  -258,   -38,   -13,   -15,  -258,  -258,   -28,  -258,
  -258,  -202,  -205,  -203,  -234,  -258,  -236,  -258,  -258,  -258,
  -258,  -258,  -258,  -249,  -253,  -258,  -191,  -197,  -194,  -258,
  -198,  -258,  -193,  -133,  -258,   -24,   -16,   -68,  -235,  -258,
  -258,  -258,  -258,  -258,  -258,  -180,  -195,  -199,   -21,  -258,
  -240,  -242,  -243,  -258,  -258,  -258,  -258,  -258,   -22,  -258,
  -258,  -258,  -245,  -258,  -247,  -241,  -244,  -246,  -248 ]

racc_goto_table = [
    50,    80,     4,    43,   142,    56,    59,    60,    61,    82,
   153,   150,   143,   231,   172,    88,   285,   183,   277,   151,
    23,   301,   184,   170,    75,    39,    25,   347,   163,   320,
   321,    74,   279,    87,   314,   315,   171,   381,   270,    94,
     4,    43,    76,    93,   325,    97,     1,   159,   324,   237,
   194,   323,    75,    75,   312,   313,   322,   347,    23,    74,
    74,   346,   166,    73,    25,   162,    93,   296,    96,    93,
   102,   103,   105,    38,   107,   177,   178,   143,   149,   403,
   404,   316,   317,   318,   319,   157,    92,   104,   148,   299,
   165,    96,   173,    75,    96,   170,   189,   183,   273,   183,
    74,    64,   306,   150,   307,     2,   160,    65,   161,    92,
   106,   286,    92,   149,   196,   198,   199,   267,   278,   200,
    67,   302,   326,   nil,   nil,   nil,   nil,   nil,   277,   285,
   nil,   285,   327,   308,   nil,   162,   367,   nil,   162,   nil,
   nil,    93,   nil,   309,   310,   311,   297,   nil,   nil,   nil,
   nil,   nil,   nil,   269,   nil,   nil,   nil,   nil,   338,   nil,
   165,   280,   nil,   165,   343,   nil,    96,   nil,   nil,   nil,
   149,   nil,   nil,    75,   nil,    75,   291,   150,   161,   nil,
    74,   161,    74,   nil,    92,   333,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   358,   nil,   nil,   nil,   354,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   393,    82,   363,   361,   267,   nil,
   nil,   394,   107,   374,   nil,   376,   302,   377,   378,   379,
   nil,   nil,   nil,   nil,   149,   nil,   nil,   nil,   162,   nil,
   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,   297,   nil,
   nil,   nil,   143,   nil,   nil,   nil,   157,   nil,   157,   nil,
   nil,   nil,   nil,   165,   nil,   nil,   398,   391,   nil,   173,
   nil,   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   149,
   nil,   161,   nil,   nil,   nil,   143,   nil,   397,   157,   395,
   410,   nil,   412,   nil,   413,   414,   416,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   422,   nil,   424,   nil,
   425,   nil,   427,   nil,   428,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,   nil,   nil,
   382,   nil,   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   411,   157,   280,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   149 ]

racc_goto_check = [
    36,    70,    30,    29,    37,    30,    30,    30,    30,    59,
    60,    26,    12,    11,    55,    58,    57,     6,    46,    28,
    38,     8,    10,    53,     9,    66,    40,    64,    43,    19,
    19,    33,    49,     9,    17,    17,    54,    80,    63,    52,
    30,    29,    48,    39,    23,    56,     1,    58,    22,    72,
    15,    21,     9,     9,    16,    16,    20,    64,    38,    33,
    33,    62,    52,    66,    40,    39,    39,    63,    30,    39,
    48,    48,    36,    65,    36,    56,    56,    12,    13,    80,
    80,    18,    18,    18,    18,    30,    38,    69,    71,     6,
    30,    30,    36,     9,    30,    53,     9,     6,    43,     6,
    33,    42,    10,    26,    10,     2,    44,    45,    38,    38,
    35,    28,    38,    13,    13,    13,    13,    58,    47,    27,
    51,    12,    24,   nil,   nil,   nil,   nil,   nil,    46,    57,
   nil,    57,     6,    12,   nil,    39,     8,   nil,    39,   nil,
   nil,    39,   nil,    15,    15,    15,    58,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,    72,   nil,
    30,    36,   nil,    30,     6,   nil,    30,   nil,   nil,   nil,
    13,   nil,   nil,     9,   nil,     9,    36,    26,    38,   nil,
    33,    38,    33,   nil,    38,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55,   nil,   nil,   nil,    12,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    49,    59,    15,    12,    58,   nil,
   nil,    11,    36,    72,   nil,    72,    12,     6,     6,     6,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,    58,   nil,
   nil,   nil,    12,   nil,   nil,   nil,    30,   nil,    30,   nil,
   nil,   nil,   nil,    30,   nil,   nil,    72,    60,   nil,    36,
   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,    13,
   nil,    38,   nil,   nil,   nil,    12,   nil,    26,    30,    12,
    72,   nil,    72,   nil,     6,     6,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    72,   nil,    72,   nil,
    72,   nil,    72,   nil,    72,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
    29,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    70,    30,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13 ]

racc_goto_pointer = [
   nil,    46,   105,   nil,   nil,   nil,   -98,   nil,  -167,   -22,
   -93,  -131,   -67,    -6,   nil,   -69,  -161,  -183,  -138,  -194,
  -169,  -175,  -179,  -184,  -107,   nil,   -73,   -10,   -65,     1,
     0,   nil,   nil,   -15,   nil,    32,    -4,   -75,    18,   -25,
    24,   nil,    74,   -62,    17,    80,  -145,   -47,    -4,  -133,
   nil,    91,   -29,   -71,   -60,   -82,   -25,  -159,   -40,   -42,
   -75,   nil,  -205,  -119,  -240,    71,    23,   nil,   nil,    11,
   -49,     7,   -99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -302,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   117,   108,   114,   235,   118,   nil,     7,
   nil,   nil,   185,   129,   119,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   nil,   nil,   238,
   236,    48,     5,     6,     8,    49,    86,   232,    57,    24,
    58,    27,   nil,   nil,   nil,   nil,   164,   nil,   186,   nil,
    29,   nil,   nil,    95,   nil,   nil,   nil,    98,    51,    52,
   350,   155,   156,   348,   271,   nil,   nil,    41,    42,   nil,
   245,   nil,   nil,   239,   240,   241,   242,   243,   244,   246,
   247,   248 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 97, :_reduce_none,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  1, 99, :_reduce_4,
  1, 99, :_reduce_5,
  1, 99, :_reduce_6,
  1, 99, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 101, :_reduce_10,
  2, 101, :_reduce_11,
  1, 103, :_reduce_none,
  4, 103, :_reduce_13,
  3, 103, :_reduce_none,
  4, 103, :_reduce_none,
  5, 103, :_reduce_none,
  3, 103, :_reduce_17,
  3, 103, :_reduce_18,
  2, 103, :_reduce_19,
  2, 103, :_reduce_20,
  6, 103, :_reduce_none,
  7, 103, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_none,
  1, 109, :_reduce_none,
  2, 109, :_reduce_26,
  2, 109, :_reduce_27,
  4, 109, :_reduce_28,
  2, 109, :_reduce_29,
  2, 109, :_reduce_30,
  1, 110, :_reduce_31,
  1, 110, :_reduce_32,
  1, 110, :_reduce_33,
  1, 110, :_reduce_34,
  1, 110, :_reduce_35,
  1, 110, :_reduce_36,
  1, 111, :_reduce_none,
  4, 111, :_reduce_38,
  1, 112, :_reduce_none,
  3, 112, :_reduce_40,
  3, 112, :_reduce_41,
  3, 112, :_reduce_42,
  1, 113, :_reduce_none,
  3, 113, :_reduce_44,
  3, 113, :_reduce_45,
  1, 114, :_reduce_none,
  3, 114, :_reduce_47,
  3, 114, :_reduce_48,
  1, 115, :_reduce_none,
  3, 115, :_reduce_50,
  3, 115, :_reduce_51,
  3, 115, :_reduce_52,
  3, 115, :_reduce_53,
  1, 116, :_reduce_none,
  3, 116, :_reduce_55,
  3, 116, :_reduce_56,
  1, 117, :_reduce_none,
  3, 117, :_reduce_58,
  1, 118, :_reduce_none,
  3, 118, :_reduce_60,
  1, 119, :_reduce_none,
  3, 119, :_reduce_62,
  1, 120, :_reduce_none,
  3, 120, :_reduce_64,
  1, 121, :_reduce_none,
  3, 121, :_reduce_66,
  1, 122, :_reduce_none,
  5, 122, :_reduce_68,
  1, 108, :_reduce_none,
  3, 108, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 102, :_reduce_82,
  3, 102, :_reduce_83,
  1, 124, :_reduce_84,
  3, 125, :_reduce_none,
  1, 126, :_reduce_86,
  1, 126, :_reduce_none,
  1, 126, :_reduce_88,
  2, 126, :_reduce_89,
  2, 126, :_reduce_90,
  2, 126, :_reduce_91,
  1, 126, :_reduce_none,
  2, 126, :_reduce_none,
  1, 127, :_reduce_94,
  3, 127, :_reduce_95,
  1, 131, :_reduce_none,
  3, 131, :_reduce_97,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 129, :_reduce_102,
  1, 129, :_reduce_103,
  1, 129, :_reduce_104,
  1, 129, :_reduce_105,
  1, 129, :_reduce_106,
  1, 129, :_reduce_107,
  1, 129, :_reduce_108,
  1, 129, :_reduce_109,
  1, 129, :_reduce_110,
  1, 129, :_reduce_111,
  1, 129, :_reduce_112,
  1, 129, :_reduce_113,
  1, 129, :_reduce_114,
  1, 129, :_reduce_115,
  0, 140, :_reduce_116,
  6, 134, :_reduce_117,
  0, 141, :_reduce_118,
  5, 134, :_reduce_119,
  2, 134, :_reduce_120,
  1, 137, :_reduce_121,
  1, 139, :_reduce_none,
  2, 139, :_reduce_none,
  1, 138, :_reduce_124,
  3, 142, :_reduce_125,
  2, 142, :_reduce_none,
  2, 142, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_129,
  1, 144, :_reduce_130,
  2, 144, :_reduce_131,
  1, 143, :_reduce_132,
  3, 143, :_reduce_133,
  1, 145, :_reduce_none,
  5, 135, :_reduce_none,
  4, 135, :_reduce_none,
  2, 135, :_reduce_none,
  1, 146, :_reduce_138,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  1, 147, :_reduce_none,
  3, 149, :_reduce_none,
  2, 149, :_reduce_none,
  2, 149, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_none,
  1, 151, :_reduce_none,
  4, 136, :_reduce_none,
  5, 136, :_reduce_none,
  5, 136, :_reduce_none,
  6, 136, :_reduce_none,
  2, 136, :_reduce_none,
  5, 136, :_reduce_none,
  6, 136, :_reduce_none,
  2, 136, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_none,
  1, 105, :_reduce_160,
  1, 105, :_reduce_161,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  2, 132, :_reduce_166,
  1, 132, :_reduce_none,
  2, 132, :_reduce_168,
  1, 155, :_reduce_169,
  3, 155, :_reduce_170,
  4, 155, :_reduce_171,
  3, 155, :_reduce_172,
  4, 155, :_reduce_173,
  3, 155, :_reduce_174,
  1, 154, :_reduce_175,
  2, 154, :_reduce_176,
  2, 154, :_reduce_177,
  3, 154, :_reduce_178,
  1, 156, :_reduce_none,
  5, 156, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_none,
  2, 158, :_reduce_none,
  2, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 106, :_reduce_none,
  2, 106, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 160, :_reduce_none,
  2, 160, :_reduce_none,
  3, 160, :_reduce_none,
  3, 160, :_reduce_none,
  4, 160, :_reduce_none,
  2, 160, :_reduce_196,
  3, 160, :_reduce_none,
  3, 160, :_reduce_198,
  4, 160, :_reduce_none,
  1, 133, :_reduce_200,
  3, 133, :_reduce_201,
  4, 133, :_reduce_202,
  4, 133, :_reduce_203,
  1, 107, :_reduce_204,
  3, 107, :_reduce_205,
  0, 98, :_reduce_none,
  2, 98, :_reduce_none,
  1, 161, :_reduce_none,
  2, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_none,
  2, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  4, 163, :_reduce_217,
  1, 165, :_reduce_218,
  3, 165, :_reduce_219,
  3, 164, :_reduce_none,
  0, 167, :_reduce_none,
  2, 167, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  3, 174, :_reduce_none,
  4, 174, :_reduce_none,
  3, 174, :_reduce_none,
  3, 166, :_reduce_none,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  5, 169, :_reduce_none,
  7, 169, :_reduce_none,
  5, 173, :_reduce_none,
  5, 170, :_reduce_none,
  7, 171, :_reduce_none,
  6, 172, :_reduce_none,
  7, 172, :_reduce_none,
  6, 172, :_reduce_none,
  7, 172, :_reduce_none,
  3, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  3, 175, :_reduce_none,
  1, 100, :_reduce_254,
  2, 100, :_reduce_255,
  3, 100, :_reduce_256,
  1, 177, :_reduce_257 ]

racc_reduce_n = 258

racc_shift_n = 429

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER_CONSTANT => 2,
  :FLOATING_CONSTANT => 3,
  :OCTAL_CONSTANT => 4,
  :HEX_CONSTANT => 5,
  :CHARACTER_LITERAL => 6,
  "(" => 7,
  ")" => 8,
  :STRING_LITERAL => 9,
  "[" => 10,
  "]" => 11,
  "." => 12,
  :IDENTIFIER => 13,
  "->" => 14,
  "++" => 15,
  "--" => 16,
  "{" => 17,
  "}" => 18,
  "," => 19,
  :SIZEOF => 20,
  "&" => 21,
  "*" => 22,
  "+" => 23,
  "-" => 24,
  "~" => 25,
  "!" => 26,
  "/" => 27,
  "%" => 28,
  "<<" => 29,
  ">>" => 30,
  "<" => 31,
  ">" => 32,
  "<=" => 33,
  ">=" => 34,
  "==" => 35,
  "!=" => 36,
  "^" => 37,
  "|" => 38,
  "&&" => 39,
  "||" => 40,
  "?" => 41,
  ":" => 42,
  "=" => 43,
  "+=" => 44,
  "-=" => 45,
  "*=" => 46,
  "/=" => 47,
  "%=" => 48,
  "<<=" => 49,
  ">>=" => 50,
  "&=" => 51,
  "|=" => 52,
  "^=" => 53,
  ";" => 54,
  :EXTERN => 55,
  :STATIC => 56,
  :AUTO => 57,
  :REGISTER => 58,
  :VOID => 59,
  :CHAR => 60,
  :SHORT => 61,
  :INT => 62,
  :LONG => 63,
  :SIGNED => 64,
  :UNSIGNED => 65,
  :FLOAT => 66,
  :DOUBLE => 67,
  :BOOL => 68,
  :TYPE_NAME => 69,
  :STRUCT => 70,
  :UNION => 71,
  :ENUM => 72,
  :CONST => 73,
  :VOLATILE => 74,
  :__INLINE__ => 75,
  :INLINE => 76,
  :__INLINE => 77,
  :CINLINE => 78,
  :C_EXP => 79,
  :EXTENSION => 80,
  :TYPEDEF => 81,
  :CASE => 82,
  :DEFAULT => 83,
  :IF => 84,
  :ELSE => 85,
  :SWITCH => 86,
  :WHILE => 87,
  :DO => 88,
  :FOR => 89,
  :GOTO => 90,
  :CONTINUE => 91,
  :BREAK => 92,
  :RETURN => 93,
  "::" => 94,
  :_ASM => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "IDENTIFIER",
  "\"->\"",
  "\"++\"",
  "\"--\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\"*=\"",
  "\"/=\"",
  "\"%=\"",
  "\"<<=\"",
  "\">>=\"",
  "\"&=\"",
  "\"|=\"",
  "\"^=\"",
  "\";\"",
  "EXTERN",
  "STATIC",
  "AUTO",
  "REGISTER",
  "VOID",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "SIGNED",
  "UNSIGNED",
  "FLOAT",
  "DOUBLE",
  "BOOL",
  "TYPE_NAME",
  "STRUCT",
  "UNION",
  "ENUM",
  "CONST",
  "VOLATILE",
  "__INLINE__",
  "INLINE",
  "__INLINE",
  "CINLINE",
  "C_EXP",
  "EXTENSION",
  "TYPEDEF",
  "CASE",
  "DEFAULT",
  "IF",
  "ELSE",
  "SWITCH",
  "WHILE",
  "DO",
  "FOR",
  "GOTO",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "\"::\"",
  "_ASM",
  "$start",
  "all",
  "C_parser",
  "primary_expression",
  "namespace_identifier",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "argument_list",
  "type_qualifier",
  "type_name",
  "initializer_list",
  "assignment_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "assignment_operator",
  "constant_expression",
  "declaration",
  "declaration_specifiers",
  "init_declarator_list",
  "storage_class",
  "type_specifier",
  "function_specifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_specifier",
  "union_specifier",
  "enum_specifier",
  "struct_term",
  "struct_tag",
  "struct_declaration_list",
  "@1",
  "@2",
  "struct_declaration",
  "struct_declarator_list",
  "type_specifier_qualifier_list",
  "struct_declarator",
  "union_term",
  "union_tag",
  "union_declaration_list",
  "union_declaration",
  "union_declarator_list",
  "union_declarator",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "direct_abstract_declarator",
  "extension_statement",
  "statement",
  "typedef",
  "func_def",
  "declarator_list",
  "compoundstatement",
  "infunc_statement_list",
  "infunc_statement",
  "ifstatement",
  "whilestatement",
  "dowhilestatement",
  "forstatement",
  "switchstatement",
  "labelstatement",
  "gotostatement",
  "expressionstatement",
  "asm_statement" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 52)
  def _reduce_2(val, _values, result)
     result = [ :IDENTIFIER, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 60)
  def _reduce_3(val, _values, result)
     result = [ :INTEGER_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 62)
  def _reduce_4(val, _values, result)
     result = [ :FLOATING_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 64)
  def _reduce_5(val, _values, result)
     result = [ :OCTAL_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 66)
  def _reduce_6(val, _values, result)
     result = [ :HEX_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 68)
  def _reduce_7(val, _values, result)
     result = [ :CHARACTER_LITERAL, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 70)
  def _reduce_8(val, _values, result)
     result = [ :STRING_LITERAL_LIST, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 72)
  def _reduce_9(val, _values, result)
     result = [ :PARENTHESES, val[1].get_elements ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 76)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 78)
  def _reduce_11(val, _values, result)
     result << val[1] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 84)
  def _reduce_13(val, _values, result)
     result = [ :OP_SUBSC, val[0], val[2] ] 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 89)
  def _reduce_17(val, _values, result)
     result = [ :OP_DOT, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 91)
  def _reduce_18(val, _values, result)
     result = [ :OP_REF, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 92)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 93)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 106)
  def _reduce_26(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 108)
  def _reduce_27(val, _values, result)
     result = [ :OP_SIZEOF_EXPR, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 110)
  def _reduce_28(val, _values, result)
     result = [ :OP_SIZEOF_TYPE, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 111)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 112)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 115)
  def _reduce_31(val, _values, result)
     result = :OP_U_AMP 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 116)
  def _reduce_32(val, _values, result)
     result = :OP_U_ASTER 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 117)
  def _reduce_33(val, _values, result)
     result = :OP_U_PLUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 118)
  def _reduce_34(val, _values, result)
     result = :OP_U_MINUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 119)
  def _reduce_35(val, _values, result)
     result = :OP_U_TILDE 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 120)
  def _reduce_36(val, _values, result)
     result = :OP_U_EXCLAM 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 125)
  def _reduce_38(val, _values, result)
      result = [ :CAST, val[1], val[3] ] 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 130)
  def _reduce_40(val, _values, result)
     result = [ :OP_MULT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 132)
  def _reduce_41(val, _values, result)
     result = [ :OP_DIV, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 134)
  def _reduce_42(val, _values, result)
     result = [ :OP_REMAIN, val[0], val[2] ]  
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 139)
  def _reduce_44(val, _values, result)
     result = [ :OP_ADD, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 141)
  def _reduce_45(val, _values, result)
     result = [ :OP_SUB, val[0], val[2] ]  
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 146)
  def _reduce_47(val, _values, result)
     result = [ :OP_LSFT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 148)
  def _reduce_48(val, _values, result)
     result = [ :OP_RSFT, val[0], val[2] ]  
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 153)
  def _reduce_50(val, _values, result)
     result = [ :OP_LT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 155)
  def _reduce_51(val, _values, result)
     result = [ :OP_GT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 157)
  def _reduce_52(val, _values, result)
     result = [ :OP_LE, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 159)
  def _reduce_53(val, _values, result)
     result = [ :OP_GE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 164)
  def _reduce_55(val, _values, result)
     result = [ :OP_EQ, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 166)
  def _reduce_56(val, _values, result)
     result = [ :OP_NE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 171)
  def _reduce_58(val, _values, result)
     result = [ :OP_AND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 176)
  def _reduce_60(val, _values, result)
     result = [ :OP_EOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 181)
  def _reduce_62(val, _values, result)
     result = [ :OP_OR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 186)
  def _reduce_64(val, _values, result)
     result = [ :OP_LAND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 191)
  def _reduce_66(val, _values, result)
     result = [ :OP_LOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 196)
  def _reduce_68(val, _values, result)
     result = [ :OP_CEX, val[0], val[2].get_elements, val[4] ]  
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 218)
  def _reduce_82(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 223)
  def _reduce_83(val, _values, result)
    			result = Expression.new( val[2] )    # ',' の後ろを採用
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 229)
  def _reduce_84(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
#			res = result.eval_const( nil )

			# if res then
			#   puts "val: #{res}"
			# else
			#   puts "val: nil"
			# end
		
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 258)
  def _reduce_86(val, _values, result)
    			result = CIntType.new( -3 )    # storage class は無視
		
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 263)
  def _reduce_88(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 268)
  def _reduce_89(val, _values, result)
    			result = val[1]                # storage class は無視
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 272)
  def _reduce_90(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 276)
  def _reduce_91(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 285)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 287)
  def _reduce_95(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 292)
  def _reduce_97(val, _values, result)
     val[0].set_initializer( val[2] ) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 303)
  def _reduce_102(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 305)
  def _reduce_103(val, _values, result)
     set_no_type_name true; result = CIntType.new(-11 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 307)
  def _reduce_104(val, _values, result)
     set_no_type_name true; result = CIntType.new( -2 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 309)
  def _reduce_105(val, _values, result)
     set_no_type_name true; result = CIntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 311)
  def _reduce_106(val, _values, result)
     set_no_type_name true; result = CIntType.new( -4 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 314)
  def _reduce_107(val, _values, result)
              set_no_type_name true
         	result = CIntType.new( -3 )
          result.set_sign :SIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 320)
  def _reduce_108(val, _values, result)
              set_no_type_name true
          result = CIntType.new( -3 )
          result.set_sign :UNSIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 325)
  def _reduce_109(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-32) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 327)
  def _reduce_110(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-64) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 329)
  def _reduce_111(val, _values, result)
     set_no_type_name true; result = CBoolType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 331)
  def _reduce_112(val, _values, result)
     set_no_type_name true; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 333)
  def _reduce_113(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 335)
  def _reduce_114(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 337)
  def _reduce_115(val, _values, result)
     set_no_type_name true; result = CDefinedType.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 343)
  def _reduce_116(val, _values, result)
     StructType.set_define( true )  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 346)
  def _reduce_117(val, _values, result)
    			StructType.end_of_parse
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 352)
  def _reduce_118(val, _values, result)
    			result = CStructType.new()
			StructType.set_define( true )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 357)
  def _reduce_119(val, _values, result)
    			StructType.end_of_parse
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 363)
  def _reduce_120(val, _values, result)
    			StructType.set_define( false )
			StructType.end_of_parse
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 369)
  def _reduce_121(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 378)
  def _reduce_124(val, _values, result)
    			result = CStructType.new( val[0].val )
			set_no_type_name true
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 387)
  def _reduce_125(val, _values, result)
    			val[1].each { |i|	# i: Decl
				i.set_type( val[0] )
				i.set_kind( :MEMBER )
				i.check
				CStructType.new_member( i )
			}
			result = val[1]
		
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 406)
  def _reduce_129(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 410)
  def _reduce_130(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 415)
  def _reduce_131(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 421)
  def _reduce_132(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 423)
  def _reduce_133(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 440)
  def _reduce_138(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 484)
  def _reduce_160(val, _values, result)
     result = :CONST 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 485)
  def _reduce_161(val, _values, result)
     result = :VOLATILE 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 496)
  def _reduce_166(val, _values, result)
    			val[1].set_type( val[0] )
			result = val[1]
		
    result
  end
.,.,

# reduce 167 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 502)
  def _reduce_168(val, _values, result)
    			result = Decl.new( val[1].val )
			result.set_type( val[0] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 508)
  def _reduce_169(val, _values, result)
     result = Decl.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 510)
  def _reduce_170(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 513)
  def _reduce_171(val, _values, result)
    			val[0].set_type( CArrayType.new( val[2] ) )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 518)
  def _reduce_172(val, _values, result)
    			val[0].set_type( CArrayType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 523)
  def _reduce_173(val, _values, result)
    		# 	Generator.warning( "W6001 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 531)
  def _reduce_174(val, _values, result)
    		# 	Generator.warning( "W6002 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 538)
  def _reduce_175(val, _values, result)
     result = CPtrType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 541)
  def _reduce_176(val, _values, result)
    			result = CPtrType.new
			result.set_qualifier( val[1] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 546)
  def _reduce_177(val, _values, result)
    			val[1].set_type(CPtrType.new)
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 551)
  def _reduce_178(val, _values, result)
    			ptrtype = CPtrType.new
			ptrtype.set_qualifier( val[1] )
			val[2].set_type( ptrtype )
			result = val[2]
		
    result
  end
.,.,

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 615)
  def _reduce_196(val, _values, result)
    			Generator.warning( "W6003 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 620)
  def _reduce_198(val, _values, result)
    			Generator.warning( "W6004 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 627)
  def _reduce_200(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 629)
  def _reduce_201(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 631)
  def _reduce_202(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 633)
  def _reduce_203(val, _values, result)
     result = C_EXP.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 638)
  def _reduce_204(val, _values, result)
    			result = [ val[0] ]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 642)
  def _reduce_205(val, _values, result)
    			val[0] << val[2]
			result = val[0]
		
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 670)
  def _reduce_217(val, _values, result)
    			val[2].each{ |i|
			   i.set_kind( :TYPEDEF )
			}
			Typedef.new_decl_list( val[1], val[2] )
                        # val[1].show_tree 0
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 679)
  def _reduce_218(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 681)
  def _reduce_219(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 744)
  def _reduce_254(val, _values, result)
     result = NamespacePath.new( val[0].val, false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 745)
  def _reduce_255(val, _values, result)
     result = NamespacePath.new( val[1].val, true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 747)
  def _reduce_256(val, _values, result)
     result = val[0].append!( val[2].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 751)
  def _reduce_257(val, _values, result)
            while true
          # ';' が表れるまで、トークンを読み飛ばす。
          # gcc の構文拡張に対応すべきだが、単純な実装として、';' まで読み飛ばす。
          # トークン単位で読み飛ばしているので、文字列やコメント内の ';' は対象にならない。
          token = next_token
          if token[1].val == ";"
            break
          end
		      # p "skip: #{token[1].val}" 
        end
      
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class C_parser


